{
  "sbg:id": "mepstein/geneprioritization/geneexprmunger/8",
  "successCodes": [],
  "label": "Expression Spreadsheet Builder",
  "baseCommand": [
    "python",
    "munger.py"
  ],
  "sbg:image_url": null,
  "arguments": [
    {
      "prefix": "",
      "position": 1,
      "separate": false,
      "valueFrom": "-c"
    },
    {
      "position": 2,
      "valueFrom": "-t",
      "separate": false
    },
    {
      "prefix": "-r",
      "separate": true,
      "valueFrom": {
        "engine": "#cwl-js-engine",
        "script": "$job.inputs.output_filename.replace(/.*\\/|\\.[^.]*$/g, '') + '_file.txt'",
        "class": "Expression"
      }
    }
  ],
  "id": "https://cgc-api.sbgenomics.com/v2/apps/mepstein/geneprioritization/geneexprmunger/8/raw/",
  "sbg:toolkitVersion": "1.0",
  "sbg:job": {
    "allocatedResources": {
      "mem": 1000,
      "cpu": 1
    },
    "inputs": {
      "output_filename": "tcga.csv",
      "phenotype_value_str": "phenotype_value_str-string-value",
      "input_files": [
        {
          "secondaryFiles": [],
          "size": 0,
          "metadata": {
            "age_at_diagnosis": "61",
            "race": "BLACK OR AFRICAN AMERICAN",
            "case_id": "TCGA-CM-4746"
          },
          "class": "File",
          "path": "/path/to/input_files-1.txt"
        },
        {
          "secondaryFiles": [],
          "size": 0,
          "metadata": {
            "age_at_diagnosis": "41",
            "ethnicity": "BLACK",
            "case_id": "TCGA-CM-1415"
          },
          "class": "File",
          "path": "/path/to/input_files-2.txt"
        },
        {
          "secondaryFiles": [],
          "size": 0,
          "metadata": {
            "age_at_diagnosis": "89",
            "case_id": "TCGA-AHSOAD"
          },
          "path": "/path/to/input_files-3.txt"
        }
      ]
    }
  },
  "hints": [
    {
      "value": 1,
      "class": "sbg:CPURequirement"
    },
    {
      "value": 1000,
      "class": "sbg:MemRequirement"
    },
    {
      "dockerImageId": "",
      "class": "DockerRequirement",
      "dockerPull": "rfranklin/pythondev"
    }
  ],
  "sbg:revisionNotes": "Added check for val length",
  "sbg:projectName": "GenePrioritization",
  "sbg:appVersion": [
    "sbg:draft-2"
  ],
  "sbg:createdOn": 1484243332,
  "sbg:publisher": "sbg",
  "sbg:createdBy": "mepstein",
  "sbg:sbgMaintained": false,
  "sbg:revisionsInfo": [
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 0,
      "sbg:revisionNotes": "Copy of charles_blatti/geneprioritizationdemo/geneexprmunger/7",
      "sbg:modifiedOn": 1484243332
    },
    {
      "sbg:modifiedBy": "charles_blatti",
      "sbg:revision": 1,
      "sbg:revisionNotes": "change name",
      "sbg:modifiedOn": 1484243771
    },
    {
      "sbg:modifiedBy": "charles_blatti",
      "sbg:revision": 2,
      "sbg:revisionNotes": "change desc",
      "sbg:modifiedOn": 1484243846
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 3,
      "sbg:revisionNotes": "Removed gene limiter (20)",
      "sbg:modifiedOn": 1484247162
    },
    {
      "sbg:modifiedBy": "charles_blatti",
      "sbg:revision": 4,
      "sbg:revisionNotes": "hack for duplicate genes\n    if string == 'SLC35E2|9906':\n        return string",
      "sbg:modifiedOn": 1484253742
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 5,
      "sbg:revisionNotes": "Adding check that val is a string in javascript code.",
      "sbg:modifiedOn": 1490993673
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 6,
      "sbg:revisionNotes": "Added phenotype_value_str",
      "sbg:modifiedOn": 1493060796
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 7,
      "sbg:revisionNotes": "Don't change aliquot_id value",
      "sbg:modifiedOn": 1493061589
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 8,
      "sbg:revisionNotes": "Added check for val length",
      "sbg:modifiedOn": 1493062594
    }
  ],
  "description": "Expression Spreadsheet Builder is a tool built for processing Level 3 RNA-seq gene expression data from The Cancer Genome Atlas. It will produce two tables of gene expression data (per gene, or per case) as well as a metadata table. It is capable of processing any number of files as it will automatically create an index for the list of files you specify, and then use that index in the command line.\n\nThis code was modified from a version produced by Gaurav Kaushik with contributions from Boysha Tijanic for the Seven Bridges + NIH BD2K Hackathon, which took place April 1st to 3rd, 2016.",
  "inputs": [
    {
      "id": "#input_files",
      "sbg:altPrefix": "--files",
      "sbg:fileTypes": "TXT",
      "type": [
        {
          "name": "input_files",
          "items": "File",
          "type": "array"
        }
      ],
      "description": "Input array of TCGA Level 3 gene expression quantification files",
      "sbg:stageInput": "link",
      "label": "Input Files"
    },
    {
      "sbg:toolDefaultValue": "<disease_type>",
      "id": "#output_filename",
      "sbg:altPrefix": "--output_filename",
      "label": "Output Filename",
      "type": [
        "string"
      ],
      "description": "Used-defined name for the output files (added as a prefix)",
      "inputBinding": {
        "prefix": "-o",
        "sbg:cmdInclude": true,
        "position": 3,
        "valueFrom": {
          "engine": "#cwl-js-engine",
          "script": "// take what the user gives and pop any extensions to prevent silly names like 'file.csv.csv'\n$job.inputs.output_filename.replace(/.*\\/|\\.[^.]*$/g, '')",
          "class": "Expression"
        },
        "separate": true
      }
    },
    {
      "id": "#phenotype_column_str",
      "sbg:toolDefaultValue": "sample_type",
      "description": "String to select a particular phenotype: 'case_id', 'age_at_diagnosis', 'vital_status', 'days_to_death', 'gender', 'sample_type', 'primary_site', 'race', 'ethnicity', 'platform', 'investigation', 'case_uuid', 'sample_uuid', 'aliquot_uuid', 'disease_type', 'experimental_strategy', 'data_subtype'",
      "label": "Selected Phenotype",
      "type": [
        "string"
      ]
    },
    {
      "id": "#phenotype_value_str",
      "sbg:toolDefaultValue": "Primary Tumor",
      "description": "Class label of interest for t_test",
      "label": "Class label",
      "type": [
        "null",
        "string"
      ]
    }
  ],
  "sbg:toolkit": "DataScience",
  "sbg:validationErrors": [],
  "sbg:project": "mepstein/geneprioritization",
  "outputs": [
    {
      "id": "#gene",
      "sbg:fileTypes": "CSV",
      "label": "Gene Matrix",
      "type": [
        "null",
        "File"
      ],
      "outputBinding": {
        "sbg:metadata": {
          "num_input_files": "$job.inputs.input_files.length"
        },
        "sbg:inheritMetadataFrom": "#input_files",
        "glob": "*_gene.csv"
      },
      "description": "Genes by Cases (row by cols)"
    },
    {
      "id": "#case",
      "sbg:fileTypes": "CSV",
      "label": "Case Matrix",
      "type": [
        "null",
        "File"
      ],
      "outputBinding": {
        "sbg:metadata": {
          "num_input_files": {
            "engine": "#cwl-js-engine",
            "script": "$job.inputs.input_files.length",
            "class": "Expression"
          }
        },
        "sbg:inheritMetadataFrom": "#input_files",
        "glob": "*_case.csv"
      },
      "description": "Transpose of Gene (rows are Cases)"
    },
    {
      "id": "#metadata",
      "sbg:fileTypes": "CSV",
      "label": "Metadata Matrix",
      "type": [
        "null",
        "File"
      ],
      "outputBinding": {
        "sbg:metadata": {
          "num_input_files": {
            "engine": "#cwl-js-engine",
            "script": "$job.inputs.input_files.length",
            "class": "Expression"
          }
        },
        "glob": {
          "engine": "#cwl-js-engine",
          "script": "$job.inputs.output_filename.replace(/.*\\/|\\.[^.]*$/g, '') + '_metadata.csv'",
          "class": "Expression"
        }
      },
      "description": "Metadata values for the input files"
    },
    {
      "id": "#index",
      "sbg:fileTypes": "TXT",
      "label": "Index File",
      "type": [
        "null",
        "File"
      ],
      "outputBinding": {
        "sbg:metadata": {
          "num_input_files": {
            "engine": "#cwl-js-engine",
            "script": "$job.inputs.input_files.length",
            "class": "Expression"
          }
        },
        "sbg:inheritMetadataFrom": "#input_files",
        "glob": {
          "engine": "#cwl-js-engine",
          "script": "$job.inputs.output_filename.replace(/.*\\/|\\.[^.]*$/g, '') + '_file.txt'",
          "class": "Expression"
        }
      },
      "description": "A file containing a list of the files used in this execution"
    }
  ],
  "cwlVersion": "sbg:draft-2",
  "sbg:toolAuthor": "Gaurav Kaushik & Boysha Tijanic/Seven Bridges",
  "sbg:categories": [
    "DataScience",
    "TCGA"
  ],
  "sbg:license": "MIT License",
  "sbg:cmdPreview": "python munger.py -r tcga_file.txt -c -t -o tcga",
  "sbg:revision": 8,
  "class": "CommandLineTool",
  "stdout": "",
  "sbg:modifiedBy": "mepstein",
  "sbg:modifiedOn": 1493062594,
  "temporaryFailCodes": [],
  "sbg:contributors": [
    "mepstein",
    "charles_blatti"
  ],
  "sbg:latestRevision": 8,
  "stdin": "",
  "requirements": [
    {
      "fileDef": [
        {
          "filename": "munger.py",
          "fileContent": "\"\"\"\nusage: munger.py [-h] [-f FILES [FILES ...]] [-r INDEX_FILE] [-c] [-o OUTPUT_FILENAME]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -f FILES [FILES ...], --files FILES [FILES ...]\n                        TCGA Gene Expression TXT files\n  -c, --csv\n  -r FILE_INDEX         A file with input files, one each line. Merged with -f files.\n  -o OUTPUT_FILENAME, --output_filename OUTPUT_FILENAME\n\"\"\"\n\nimport pandas as pd\nimport argparse\nimport sys\nimport re\n\n# To read TXT files:\n# df = pd.read_table(filename)\n# To read MAF files:\n# df = pd.read_table(filename, skiprows=1) # to skip the version row\n\ndef strip_pipe(string):\n    if string == 'SLC35E2|9906':\n        return string\n    pos = string.find('|')\n    if pos != -1:\n        if string.startswith(\"?|\"):\n            string = string[pos+1:]\n        else:\n            string = string[:pos]\n    return string\n\n\ndef get_dataframe_list(args, data_fields=('gene', 'RPKM')):\n\n    # GET A LIST OF DATAFRAMES\n    dfs, files = [], args['files'] or []\n    if args['file_index']:\n        with open(args['file_index']) as fp:\n            files.extend(fp.readlines())\n    files = sorted(filter(None, set([f.strip() for f in files])))\n    for f in files:\n        # Get only specific columns with usecols\n        df = pd.read_table(f, usecols=data_fields)\n        df[df.columns[0]] = df[df.columns[0]].apply(strip_pipe)\n        dfs.append(df)\n    return dfs, files # a list of dataframes\n\ndef get_metadata_tag(filename):\n    \"\"\" Gets a filename (without extension) from a provided path \"\"\"\n    m = re.search('TCGA-\\w+-\\w+-\\w+-\\w+-\\w+-\\w+',filename)\n    if m:\n        return m.group(0)\n    return filename\n\ndef merge_texts(args):\n    # get the list of dataframes\n    dfs, filenames = get_dataframe_list(args)\n    # files_list = filenames\n    # get the filenames to later append the column name with the TCGA barcode\n    # filenames = args['files'] # need to get the INDEX\n    # rename the columns of the first df\n    print dfs\n    df = dfs[0].rename(columns={'RPKM': get_metadata_tag(filenames[0])})\n    # enumerate over the list, merge, and rename columns\n    for i, frame in enumerate(dfs[1:], 2):\n        df = df.merge(frame, on='gene').rename(columns={'RPKM':get_metadata_tag(filenames[i-1])})\n    return df\n\ndef get_csv(args, df, filename='GEX_dataframe.csv', header_opt=False, index_opt=False):\n    # if csv is true and an output filename is given, rename\n    # there is a default filename, so it should pass if --csv is True\n    if args['csv'] and args['output_filename']:\n        return df.to_csv(path_or_buf=filename, header=header_opt, index=index_opt)\n\ndef get_transpose(df):\n    df_transpose = df.transpose()\n    df_transpose = df_transpose.rename(index = {'gene':'case'})\n    return df_transpose\n\ndef main(args):\n    df = merge_texts(args)\n    get_csv(args, df, filename=str(args['output_filename']) + '_by_gene.csv', header_opt=True)\n    if args['transpose']:\n        get_csv(args, get_transpose(df), filename=str(args['output_filename']) + '_by_case.csv', header_opt=False, index_opt=True)\n    return df\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-f\", \"--files\", help=\"TCGA Gene Expression TXT files\", nargs=\"+\")\n    parser.add_argument(\"-c\", \"--csv\", action=\"store_true\", default=False)\n    parser.add_argument(\"-t\", \"--transpose\", action=\"store_true\", default=False)\n    parser.add_argument(\"-o\", \"--output_filename\", type=str, default=\"GEX_dataframe\")\n    parser.add_argument(\"-r\", \"--file_index\", type=str, default=None)\n\n    args = parser.parse_args()\n    args = vars(args)\n    if not args['files'] and not args['file_index']:\n        parser.print_help()\n        sys.exit(0)\n\n    df = main(args)"
        },
        {
          "filename": {
            "engine": "#cwl-js-engine",
            "script": "// Metadata CSV\n$job.inputs.output_filename.replace(/.*\\/|\\.[^.]*$/g, '') + '_metadata.csv'\n// take processed output_filename and add appropriate suffix",
            "class": "Expression"
          },
          "fileContent": {
            "engine": "#cwl-js-engine",
            "script": "{\n  var pstr = $job.inputs.phenotype_column_str;\n  var pvstr = $job.inputs.phenotype_value_str;\n  var keys = ['aliquot_id'].concat(pstr.split(',,'));\n  var records = [];\n  for (var k=0; k<keys.length; k++) {\n    r = []\n    for (var i=0; i<$job.inputs.input_files.length; i++) {\n      var meta = $job.inputs.input_files[i].metadata;\n      var val = (meta[keys[k]] || '')\n      if (k > 0 && (typeof val === 'string' || val instanceof String) && val.length > 0) {\n          //val = val.replace(\"Primary Tumor\", 1);\n          //val = val.replace(\"Solid Tissue Normal\", 0);\n          if (val == pvstr) {\n            val = 1;\n          }\n          else {\n            val = 0;\n          }\n      }\n      r.push(val);\n    }\n    records.push(r.join(','));\n  }\n  var return_str = '';\n  for (var k=0; k<keys.length; k++) {\n    return_str += keys[k] + \",\" + records[k] + \"\\n\";\n  }\n  return return_str;\n}\n ",
            "class": "Expression"
          }
        },
        {
          "filename": {
            "engine": "#cwl-js-engine",
            "script": "// Index File\n$job.inputs.output_filename.replace(/.*\\/|\\.[^.]*$/g, '') + '_file.txt'\n// take processed output_filename and add appropriate suffix",
            "class": "Expression"
          },
          "fileContent": {
            "engine": "#cwl-js-engine",
            "script": "$job.inputs.input_files.map(function(f){return f.path.split('/').pop()}).join('\\n');\n// create an index file by taking the filename for each input file in the input array\n// an adding each in a new line (\\n)",
            "class": "Expression"
          }
        }
      ],
      "class": "CreateFileRequirement"
    },
    {
      "id": "#cwl-js-engine",
      "class": "ExpressionEngineRequirement",
      "requirements": [
        {
          "class": "DockerRequirement",
          "dockerPull": "rabix/js-engine"
        }
      ]
    }
  ]
}