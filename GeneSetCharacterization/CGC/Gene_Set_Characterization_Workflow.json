{
  "sbg:id": "mepstein/genesetcharacterization/gsc-workflow/43",
  "label": "Gene Set Characterization Workflow",
  "sbg:publisher": "sbg",
  "sbg:image_url": "https://cgc.sbgenomics.com/ns/brood/static/mepstein/genesetcharacterization/gsc-workflow/43.png",
  "id": "https://cgc-api.sbgenomics.com/v2/apps/mepstein/genesetcharacterization/gsc-workflow/43/raw/",
  "sbg:toolkitVersion": "v1.0",
  "hints": [],
  "sbg:canvas_x": 61,
  "sbg:projectName": "GeneSetCharacterization",
  "sbg:appVersion": [
    "sbg:draft-2"
  ],
  "sbg:createdOn": 1505415044,
  "sbg:createdBy": "mepstein",
  "sbg:sbgMaintained": false,
  "sbg:revisionsInfo": [
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 0,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1505415044
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 1,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1505417049
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 2,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1505770701
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 3,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1506020967
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 4,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1506021916
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 5,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1506022581
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 6,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1506474976
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 7,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1506556978
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 8,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1506569954
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 9,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1506573042
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 10,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1506624051
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 11,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1506624394
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 12,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1506626046
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 13,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1506626591
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 14,
      "sbg:revisionNotes": "",
      "sbg:modifiedOn": 1506717598
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 15,
      "sbg:revisionNotes": "",
      "sbg:modifiedOn": 1506717665
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 16,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1506718130
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 17,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1507155342
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 18,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1507161476
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 19,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1507220779
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 20,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1507220948
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 21,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1507221100
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 22,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1507221248
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 23,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1507225672
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 24,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1507225762
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 25,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1507237219
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 26,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1508286503
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 27,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1508352845
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 28,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1508354979
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 29,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1508355896
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 30,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1508879481
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 31,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1508905619
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 32,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1508944865
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 33,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1508946973
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 34,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1508947525
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 35,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1508948469
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 36,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1508949080
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 37,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1508950219
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 38,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1509503002
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 39,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1509581218
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 40,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1509582667
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 41,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1509583385
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 42,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1509652020
    },
    {
      "sbg:modifiedBy": "mepstein",
      "sbg:revision": 43,
      "sbg:revisionNotes": null,
      "sbg:modifiedOn": 1509655713
    }
  ],
  "description": "This workflow tests a gene set for enrichment against a large compendium of annotations.\n\nIn this pipeline, the user submits a gene set (or multiple gene sets) to determine if they are enriched for a pathway, a Gene Ontology term, or other types of annotations.  This pipeline tests your gene set for enrichment against a large compendium of annotations.  Gene Set Characterization can be done using a standard statistical test or in a Knowledge Network-guided mode (using DRaWR, PMID: 27153592).\n\n### Required inputs\n\nThis workflow has one required input file:\n\n1. Genomic Spreadsheet File (ID: *genomic_spreadsheet_file*).  This currently must be a TSV file (a spreadsheet with tab-separated values).  The first row (header) should contain the names of the gene sets in the corresponding columns.  The first column of the spreadsheet should be the gene identifiers corresponding to each row.  For each entry in the spreadsheet table, a \u201c1\u201d indicates that the corresponding row gene is part of the corresponding column gene set, a \u201c0\u201d means it is not.  There should be no NA values/empty cells.\n\nThere are two required input parameters:\n\n1. Species Taxon ID (ID: *taxonid*; type: string).  The ID of the species to be used in the analysis, e.g., \"9606\" for human.  Possible values are listed on the [KnowEnG Knowledge Network Data References page][https://knoweng.org/kn-data-references/#kn_contents_by_species] (use one of the values in parentheses).\n\n2. Gene Set Property Network Edge Type (ID: *pg_edge_type*; type: string).  The edge type for the gene set property network, e.g., \"gene_ontology\".  Possible values are listed on the [KnowEnG Knowledge Network Data References page][https://knoweng.org/kn-data-references/#kn_contents_by_property-gene_edge_type] (use one of the values in parentheses).\n\n### Optional inputs\n\nThere are two optional input parameters:\n\n1. Knowledge Network Edge Type (ID: *gg_edge_type*; type: string).  The edge type for the knowledge network (i.e., interaction network), e.g., \"STRING_experimental\".  Possible values are listed on the [KnowEnG Knowledge Network Data References page][https://knoweng.org/kn-data-references/#kn_contents_by_gene-gene_edge_type] (use one of the values in parentheses).  If no value is specified, no knowledge network will be used in the analysis.\n\n2. Amount of Network Smoothing (ID: *network_smoothing_percent*; type: int).  The amount of network smoothing.  This should be an integer between 0 and 100 (inclusive).  If no value is specified (or the value is outside that range), 50% will be used.  A greater value means greater contribution from the network interactions.  (This value is only relevant if the knowledge network is used.)\n\n### Outputs\n\nThis workflow generates nine output files.  These are outlined below.  (The structure and order specified here may not match what's listed on the completed task page.)\n\n#### Results\n\n* GSC Results (file name: `gsc_results.txt`).\n\n* README (file name: `README-GSC.txt`).  This file describes the various output files.\n\n#### Mapping\n\n* Gene Map File (file name: `gene_map.txt`).\n\n* Clean Genomic File (file name: `clean_gene_set_matrix.txt`).\n\n* Gene Set Name Map File (file name: `gene_set_name_map.txt`).\n\n* Raw Enrichment Scores (file name format: `DRaWR_sorted_by_property_score_<string_based_on_date_time>.df` or `fisher_sorted_by_property_score_<string_based_on_date_time>.df`).\n\n#### Metadata and run info\n\n* Gene Set Property Network Metadata File (file name format: `<taxonid>.<edge_type>.metadata`, e.g., `9606.gene_ontology.metadata`).\n\n* Interaction Network Metadata File (file name format: `<taxonid>.<edge_type>.metadata`, e.g., `9606.STRING_experimental.metadata`).  This file will only be present if a knowledge network was used in the analysis.\n\n* GSC Run Params yml (file name: `run_params.yml`).",
  "sbg:toolkit": "KnowEnG_CGC",
  "sbg:canvas_y": 39,
  "sbg:validationErrors": [],
  "sbg:project": "mepstein/genesetcharacterization",
  "outputs": [
    {
      "id": "#gene_set_network_metadata_file",
      "sbg:y": 32.801118738511036,
      "label": "Gene Set Property Network Metadata File",
      "type": [
        "null",
        "File"
      ],
      "description": "The gene set property network metadata file",
      "sbg:includeInPorts": true,
      "required": false,
      "source": [
        "#Knowledge_Network_Fetcher_1.network_metadata_file"
      ],
      "sbg:x": 1085.05
    },
    {
      "id": "#run_params_yml",
      "sbg:y": 430.72829302619493,
      "label": "GSC Run Params yml",
      "type": [
        "null",
        "File"
      ],
      "description": "The configuration parameters specified for the GSC run",
      "sbg:includeInPorts": true,
      "required": false,
      "source": [
        "#Gene_Set_Characterization.run_params_yml"
      ],
      "sbg:x": 1210.69
    },
    {
      "id": "#new_data_file",
      "sbg:y": 203.52946561925555,
      "label": "GSC Results",
      "type": [
        "null",
        "File"
      ],
      "description": "GSC enrichment scores, with names mapped",
      "sbg:includeInPorts": true,
      "required": false,
      "source": [
        "#Join_Names.new_data_file"
      ],
      "sbg:x": 1085.05
    },
    {
      "id": "#gene_set_name_map_file",
      "sbg:y": 105.88239781996785,
      "label": "Gene Set Name Map File",
      "type": [
        "null",
        "File"
      ],
      "description": "The gene set name map file",
      "sbg:includeInPorts": true,
      "required": false,
      "source": [
        "#Join_Names.name_map_file_out"
      ],
      "sbg:x": 1210.69
    },
    {
      "id": "#interaction_network_metadata_file",
      "sbg:y": 276.47062413832725,
      "label": "Interaction Network Metadata File",
      "type": [
        "null",
        "File"
      ],
      "description": "The interaction network metadata file",
      "sbg:includeInPorts": true,
      "required": false,
      "source": [
        "#Join_Names.interaction_network_metadata_file_out"
      ],
      "sbg:x": 1210.69
    },
    {
      "id": "#readme",
      "sbg:y": 347.05900304457725,
      "label": "README",
      "type": [
        "null",
        "File"
      ],
      "description": "README-GSC.txt",
      "sbg:includeInPorts": true,
      "required": false,
      "source": [
        "#Gene_Set_Characterization.readme"
      ],
      "sbg:x": 1085.05
    },
    {
      "id": "#gene_map_file",
      "sbg:y": 607.0588235294118,
      "label": "Gene Map File",
      "type": [
        "null",
        "File"
      ],
      "description": "The gene map file",
      "sbg:includeInPorts": true,
      "required": false,
      "source": [
        "#Gene_Set_Characterization.gene_map_file_out"
      ],
      "sbg:x": 1210.69
    },
    {
      "id": "#clean_genomic_file",
      "sbg:y": 516.4706600413604,
      "label": "Clean Genomic File",
      "type": [
        "null",
        "File"
      ],
      "description": "The clean genomic spreadsheet file",
      "sbg:includeInPorts": true,
      "required": false,
      "source": [
        "#Gene_Set_Characterization.genomic_file_out"
      ],
      "sbg:x": 1085.05
    },
    {
      "id": "#enrichment_scores",
      "sbg:y": 662.1568388097427,
      "label": "Raw Enrichment Scores",
      "type": [
        "null",
        "File"
      ],
      "description": "The GSC raw enrichment scores",
      "sbg:includeInPorts": true,
      "required": false,
      "source": [
        "#Gene_Set_Characterization.enrichment_scores"
      ],
      "sbg:x": 1085.05
    }
  ],
  "cwlVersion": "sbg:draft-2",
  "sbg:toolAuthor": "KnowEnG",
  "sbg:categories": [
    "Analysis",
    "Characterization",
    "Enrichment"
  ],
  "sbg:license": "Copyright (c) 2017, University of Illinois Board of Trustees; All rights reserved.",
  "steps": [
    {
      "id": "#Pipeline_Preprocessing",
      "run": {
        "sbg:validationErrors": [],
        "sbg:id": "mepstein/genesetcharacterization/data-cleaning-copy/18",
        "successCodes": [],
        "label": "Data Cleaning/Preprocessing",
        "sbg:project": "mepstein/genesetcharacterization",
        "baseCommand": [
          "sh",
          "run_dc.cmd"
        ],
        "sbg:image_url": null,
        "x": 455.55,
        "outputs": [
          {
            "id": "#gene_unmap_file",
            "label": "Gene Unmapped File",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": "*_UNMAPPED.tsv"
            },
            "description": "The genes that were not mapped",
            "doc": "two columns for original gene ids and unmapped reason code"
          },
          {
            "id": "#gene_map_file",
            "label": "Gene Map File",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": "*_MAP.tsv"
            },
            "description": "The gene map file",
            "doc": "two columns for internal gene ids and original gene ids"
          },
          {
            "id": "#cmd_log_file",
            "description": "The log of the data cleaning command",
            "label": "Command Log File",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": "run_dc.cmd"
            }
          },
          {
            "id": "#cleaning_parameters_yml",
            "label": "Cleaning Parameters File",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": "run_cleanup.yml"
            },
            "description": "The configuration parameters specified for the data cleaning run",
            "doc": "data cleaning parameters in yaml format"
          },
          {
            "id": "#cleaning_log_file",
            "label": "Cleaning Log File",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": "log_*_pipeline.yml"
            },
            "description": "The log of the data cleaning run",
            "doc": "information on souce of errors for cleaning pipeline"
          },
          {
            "id": "#clean_phenotypic_file",
            "label": "Clean Phenotypic Spreadsheet",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": {
                "engine": "#cwl-js-engine",
                "script": "function basename(path) {\n    var basename;\n\n    var ix = path.lastIndexOf('.');\n    if (ix == -1) {\n        basename = path;\n    }\n    else {\n        basename = path.substr(0, ix);\n    }\n\n    ix = basename.lastIndexOf('/')\n    if (ix != -1) {\n        basename = basename.substr(ix + 1);\n    }\n\n    return basename;\n}\n\nif ($job.inputs.phenotypic_spreadsheet_file) {\n    basename($job.inputs.phenotypic_spreadsheet_file.name) + \"_ETL.tsv\";\n}\nelse {\n    \"NONE_ETL.tsv\";\n}\n",
                "class": "Expression"
              }
            },
            "description": "The clean phenotypic spreadsheet",
            "doc": "phenotype file prepared for pipeline"
          },
          {
            "id": "#clean_genomic_file",
            "label": "Clean Genomic Spreadsheet",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": {
                "engine": "#cwl-js-engine",
                "script": "function basename(path) {\n    var basename;\n\n    var ix = path.lastIndexOf('.');\n    if (ix == -1) {\n        basename = path;\n    }\n    else {\n        basename = path.substr(0, ix);\n    }\n\n    ix = basename.lastIndexOf('/')\n    if (ix != -1) {\n        basename = basename.substr(ix + 1);\n    }\n\n    return basename;\n}\n\nbasename($job.inputs.genomic_spreadsheet_file.name) + \"_ETL.tsv\";\n",
                "class": "Expression"
              }
            },
            "description": "The clean genomic spreadsheet",
            "doc": "matrix with gene names mapped and data cleaned"
          }
        ],
        "arguments": [],
        "cwlVersion": "sbg:draft-2",
        "id": "mepstein/genesetcharacterization/data-cleaning-copy/18",
        "temporaryFailCodes": [],
        "y": 290.1121251723346,
        "sbg:job": {
          "allocatedResources": {
            "mem": 1000,
            "cpu": 1
          },
          "inputs": {}
        },
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "knowengdev/data_cleanup_pipeline:07_26_2017"
          },
          {
            "ramMin": 5000,
            "outdirMin": 512000,
            "class": "ResourceRequirement",
            "coresMin": 1
          },
          {
            "value": 1,
            "class": "sbg:CPURequirement"
          },
          {
            "value": 1000,
            "class": "sbg:MemRequirement"
          }
        ],
        "inputs": [
          {
            "id": "#taxonid",
            "sbg:toolDefaultValue": "9606",
            "label": "Data Cleaning/Preprocessing",
            "type": [
              "null",
              "string"
            ],
            "doc": "taxon id of species related to genomic spreadsheet",
            "default": "9606",
            "description": "The species taxon ID (e.g., 9606 for human)",
            "sbg:includeInPorts": true,
            "required": false
          },
          {
            "id": "#source_hint",
            "sbg:toolDefaultValue": "''",
            "label": "ID Source Hint",
            "type": [
              "null",
              "string"
            ],
            "doc": "suggestion for ID source database used to resolve ambiguities in mapping",
            "default": "\\'\\'",
            "description": "The source hint for the redis queries (can be '')"
          },
          {
            "id": "#redis_port",
            "sbg:toolDefaultValue": 6379,
            "label": "RedisDB Port",
            "type": [
              "null",
              "int"
            ],
            "doc": "port for Redis db",
            "default": 6379,
            "description": "The redis DB port"
          },
          {
            "id": "#redis_pass",
            "sbg:toolDefaultValue": "KnowEnG",
            "label": "RedisDB Password",
            "type": [
              "null",
              "string"
            ],
            "doc": "password for Redis db",
            "default": "KnowEnG",
            "description": "The redis DB password"
          },
          {
            "id": "#redis_host",
            "sbg:toolDefaultValue": "knowredis.knoweng.org",
            "label": "RedisDB Host",
            "type": [
              "null",
              "string"
            ],
            "doc": "url of Redis db",
            "default": "knowredis.knoweng.org",
            "description": "The redis DB host name"
          },
          {
            "id": "#pipeline_type",
            "description": "The name of the pipeline that will be run (i.e., data cleaning is pipeline-specific)",
            "label": "Name of Pipeline",
            "type": [
              "string"
            ],
            "doc": "keywork name of pipeline from following list ['gene_prioritization_pipeline', 'samples_clustering_pipeline', 'geneset_characterization_pipeline']"
          },
          {
            "sbg:toolDefaultValue": {
              "location": "/bin/sh",
              "class": "File"
            },
            "id": "#phenotypic_spreadsheet_file",
            "label": "Phenotypic Spreadsheet File (optional)",
            "type": [
              "null",
              "File"
            ],
            "doc": "the phenotypic spreadsheet input for the pipeline [may be optional]",
            "default": {
              "location": "/bin/sh",
              "class": "File"
            },
            "description": "The phenotypic spreadsheet file (optional)",
            "required": false
          },
          {
            "id": "#genomic_spreadsheet_file",
            "label": "Genomic Spreadsheet File",
            "type": [
              "File"
            ],
            "doc": "the genomic spreadsheet input for the pipeline",
            "description": "The genomic spreadsheet file",
            "required": true
          },
          {
            "id": "#gene_prioritization_corr_measure",
            "sbg:toolDefaultValue": "missing",
            "label": "GP Correlation Measure",
            "type": [
              "null",
              "string"
            ],
            "doc": "if pipeline_type=='gene_prioritization_pipeline', then must be one of either ['t_test', 'pearson']",
            "default": "missing",
            "description": "The correlation measure to be used for GP (e.g., t_test or pearson)"
          }
        ],
        "sbg:revision": 18,
        "sbg:projectName": "GeneSetCharacterization",
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "class": "CommandLineTool",
        "stdout": "",
        "sbg:modifiedBy": "mepstein",
        "sbg:createdOn": 1505406239,
        "sbg:modifiedOn": 1507221156,
        "sbg:createdBy": "mepstein",
        "sbg:contributors": [
          "mepstein"
        ],
        "sbg:latestRevision": 18,
        "stdin": "",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:modifiedOn": 1505406239,
            "sbg:revision": 0,
            "sbg:revisionNotes": "Copy of mepstein/genesetcharacterization/data-cleaning/1"
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:modifiedOn": 1505406320,
            "sbg:revision": 1,
            "sbg:revisionNotes": null
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:modifiedOn": 1505413786,
            "sbg:revision": 2,
            "sbg:revisionNotes": null
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:modifiedOn": 1505422802,
            "sbg:revision": 3,
            "sbg:revisionNotes": null
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:modifiedOn": 1505425456,
            "sbg:revision": 4,
            "sbg:revisionNotes": null
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:modifiedOn": 1505488133,
            "sbg:revision": 5,
            "sbg:revisionNotes": null
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:modifiedOn": 1505492945,
            "sbg:revision": 6,
            "sbg:revisionNotes": null
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:modifiedOn": 1505493684,
            "sbg:revision": 7,
            "sbg:revisionNotes": null
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:modifiedOn": 1505513593,
            "sbg:revision": 8,
            "sbg:revisionNotes": null
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:modifiedOn": 1505520805,
            "sbg:revision": 9,
            "sbg:revisionNotes": null
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:modifiedOn": 1505756420,
            "sbg:revision": 10,
            "sbg:revisionNotes": null
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:modifiedOn": 1505757869,
            "sbg:revision": 11,
            "sbg:revisionNotes": null
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:modifiedOn": 1506022304,
            "sbg:revision": 12,
            "sbg:revisionNotes": null
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:modifiedOn": 1506554378,
            "sbg:revision": 13,
            "sbg:revisionNotes": null
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:modifiedOn": 1506570023,
            "sbg:revision": 14,
            "sbg:revisionNotes": null
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:modifiedOn": 1506622701,
            "sbg:revision": 15,
            "sbg:revisionNotes": null
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:modifiedOn": 1506625592,
            "sbg:revision": 16,
            "sbg:revisionNotes": null
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:modifiedOn": 1506718068,
            "sbg:revision": 17,
            "sbg:revisionNotes": null
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:modifiedOn": 1507221156,
            "sbg:revision": 18,
            "sbg:revisionNotes": null
          }
        ],
        "requirements": [
          {
            "id": "#cwl-js-engine",
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          },
          {
            "class": "InlineJavascriptRequirement"
          },
          {
            "class": "ShellCommandRequirement"
          },
          {
            "fileDef": [
              {
                "filename": "run_dc.cmd",
                "fileContent": {
                  "engine": "#cwl-js-engine",
                  "script": "str = \"\"\n\nstr += \"pipeline_type: \" + $job.inputs.pipeline_type + \"\\n\";\nstr += \"spreadsheet_name_full_path: \" + $job.inputs.genomic_spreadsheet_file.path + \"\\n\";\nstr += \"taxonid: \" + $job.inputs.taxonid + \"\\n\";\nstr += \"redis_credential:\\n\";\nstr += \"  host: \" + $job.inputs.redis_host + \"\\n\";\nstr += \"  password: \" + $job.inputs.redis_pass + \"\\n\";\nstr += \"  port: \" + $job.inputs.redis_port + \"\\n\";\nstr += \"source_hint: \" + $job.inputs.source_hint + \"\\n\";\nstr += \"results_directory: ./\\n\";\n\nif ($job.inputs.phenotypic_spreadsheet_file && $job.inputs.phenotypic_spreadsheet_file.name != \"sh\") {\n    str += \"phenotype_name_full_path: \" + $job.inputs.phenotypic_spreadsheet_file.path + \"\\n\";\n}\nif ($job.inputs.pipeline_type == \"gene_prioritization_pipeline\") {\n    str += \"correlation_measure: \" + $job.inputs.gene_prioritization_corr_measure + \"\\n\";\n}\n\n//str2 = \"echo \\\"\" + str + \"\\\" > run_cleanup.yml\"\n//str2 = \"echo \\\"\" + str + \"\\\" > run_cleanup.yml && touch log_X_pipeline.yml && touch GX_ETL.tsv && touch PX_ETL.tsv && touch X_MAP.tsv && touch X_UNMAPPED.tsv\"\nstr2 = \"echo \\\"\" + str + \"\\\" > run_cleanup.yml && date && python3 /home/src/data_cleanup.py -run_directory ./ -run_file run_cleanup.yml && date\"\n\nstr2;\n",
                  "class": "Expression"
                }
              }
            ],
            "class": "CreateFileRequirement"
          }
        ],
        "sbg:publisher": "sbg",
        "description": "Clean/preprocess input data (genomic and optionally phenotypic) for use with other tools/pipelines.",
        "sbg:cmdPreview": "sh run_dc.cmd",
        "doc": "checks the inputs of a pipeline for potential sources of errors",
        "sbg:sbgMaintained": false
      },
      "inputs": [
        {
          "id": "#Pipeline_Preprocessing.taxonid",
          "source": [
            "#taxonid"
          ]
        },
        {
          "id": "#Pipeline_Preprocessing.source_hint",
          "default": "''"
        },
        {
          "id": "#Pipeline_Preprocessing.redis_port",
          "default": 6379
        },
        {
          "id": "#Pipeline_Preprocessing.redis_pass",
          "default": "KnowEnG"
        },
        {
          "id": "#Pipeline_Preprocessing.redis_host",
          "default": "knowredis.knoweng.org"
        },
        {
          "id": "#Pipeline_Preprocessing.pipeline_type",
          "default": "geneset_characterization_pipeline"
        },
        {
          "id": "#Pipeline_Preprocessing.phenotypic_spreadsheet_file"
        },
        {
          "id": "#Pipeline_Preprocessing.genomic_spreadsheet_file",
          "source": [
            "#genomic_spreadsheet_file"
          ]
        },
        {
          "id": "#Pipeline_Preprocessing.gene_prioritization_corr_measure"
        }
      ],
      "outputs": [
        {
          "id": "#Pipeline_Preprocessing.gene_unmap_file"
        },
        {
          "id": "#Pipeline_Preprocessing.gene_map_file"
        },
        {
          "id": "#Pipeline_Preprocessing.cmd_log_file"
        },
        {
          "id": "#Pipeline_Preprocessing.cleaning_parameters_yml"
        },
        {
          "id": "#Pipeline_Preprocessing.cleaning_log_file"
        },
        {
          "id": "#Pipeline_Preprocessing.clean_phenotypic_file"
        },
        {
          "id": "#Pipeline_Preprocessing.clean_genomic_file"
        }
      ],
      "sbg:x": 455.55,
      "sbg:y": 290.1121251723346
    },
    {
      "id": "#Join_Names",
      "run": {
        "sbg:validationErrors": [],
        "sbg:id": "mepstein/genesetcharacterization/join-names/4",
        "successCodes": [],
        "label": "Join Names",
        "sbg:project": "mepstein/genesetcharacterization",
        "baseCommand": [
          "sh",
          "file_renamer.cmd",
          "&&",
          "python3",
          "join_names.py"
        ],
        "sbg:image_url": null,
        "x": 867.67,
        "outputs": [
          {
            "id": "#new_data_file",
            "description": "The new data file",
            "label": "New Data File",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": {
                "engine": "#cwl-js-engine",
                "script": "$job.inputs.output_file_name",
                "class": "Expression"
              }
            }
          },
          {
            "id": "#name_map_file_out",
            "description": "The name map file",
            "label": "Name Map File",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": "gene_set_name_map.txt"
            }
          },
          {
            "id": "#interaction_network_metadata_file_out",
            "description": "The interaction network metadata file",
            "label": "Interaction Network Metadata File",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": "interaction_network.metadata"
            }
          }
        ],
        "arguments": [],
        "cwlVersion": "sbg:draft-2",
        "id": "mepstein/genesetcharacterization/join-names/4",
        "temporaryFailCodes": [],
        "y": 277.64705882352945,
        "sbg:job": {
          "allocatedResources": {
            "mem": 1000,
            "cpu": 1
          },
          "inputs": {
            "interaction_network_metadata_file": {
              "secondaryFiles": [],
              "size": 0,
              "class": "File",
              "path": "/path/to/interaction_network_metadata_file.ext"
            },
            "data_file": {
              "secondaryFiles": [],
              "size": 0,
              "class": "File",
              "path": "/path/to/data_file.ext"
            },
            "name_map_file": {
              "secondaryFiles": [],
              "size": 0,
              "class": "File",
              "path": "/path/to/name_map_file.ext"
            },
            "output_file_name": "output_file_name-string-value"
          }
        },
        "hints": [
          {
            "value": 1,
            "class": "sbg:CPURequirement"
          },
          {
            "value": 1000,
            "class": "sbg:MemRequirement"
          },
          {
            "dockerImageId": "",
            "class": "DockerRequirement",
            "dockerPull": "cblatti3/py3_slim:0.1"
          }
        ],
        "inputs": [
          {
            "id": "#output_file_name",
            "description": "The output file name",
            "label": "Output File Name",
            "type": [
              "string"
            ]
          },
          {
            "id": "#name_map_file",
            "sbg:fileTypes": "TSV",
            "label": "Name Map File",
            "type": [
              "File"
            ],
            "description": "The name map file",
            "required": true,
            "inputBinding": {
              "prefix": "-m",
              "sbg:cmdInclude": true,
              "separate": true
            }
          },
          {
            "id": "#interaction_network_metadata_file",
            "description": "The interaction network metadata file",
            "required": false,
            "label": "Interaction Network Metadata File",
            "type": [
              "null",
              "File"
            ]
          },
          {
            "id": "#data_file",
            "sbg:fileTypes": "TSV",
            "label": "Data File",
            "type": [
              "File"
            ],
            "description": "The data file",
            "required": true,
            "inputBinding": {
              "prefix": "-f",
              "sbg:cmdInclude": true,
              "separate": true
            }
          }
        ],
        "sbg:revision": 4,
        "sbg:projectName": "GeneSetCharacterization",
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "class": "CommandLineTool",
        "stdout": {
          "engine": "#cwl-js-engine",
          "script": "$job.inputs.output_file_name",
          "class": "Expression"
        },
        "sbg:modifiedBy": "mepstein",
        "sbg:createdOn": 1507143851,
        "sbg:modifiedOn": 1508283936,
        "sbg:createdBy": "mepstein",
        "sbg:contributors": [
          "mepstein"
        ],
        "sbg:latestRevision": 4,
        "stdin": "",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:modifiedOn": 1507143851,
            "sbg:revision": 0,
            "sbg:revisionNotes": null
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:modifiedOn": 1507145416,
            "sbg:revision": 1,
            "sbg:revisionNotes": null
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:modifiedOn": 1508281996,
            "sbg:revision": 2,
            "sbg:revisionNotes": null
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:modifiedOn": 1508282519,
            "sbg:revision": 3,
            "sbg:revisionNotes": null
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:modifiedOn": 1508283936,
            "sbg:revision": 4,
            "sbg:revisionNotes": null
          }
        ],
        "requirements": [
          {
            "fileDef": [
              {
                "filename": "join_names.py",
                "fileContent": "#!/usr/bin/env python3\n\n\n\"\"\"\nThis program adds columns to a file by matching keys in a designated\ncolumn of that file to keys/lines in another file.\n\nMore specifically:\nThis program takes two required arguments, a data_file (-f) and a name_map_file (-m).\nEach of these are delimiter-separated files (-d, default '\\t').\n\nFor the data_file, one column is designated as the data_column (-c, default 1).\n\nFor the name_map_file, one column is designated as the key_column (-k, default 1).\n\nThe program loops through the lines of the data_file, uses the data in\nthe data_column as a key, finds that key in the name_map_file, and\nadds columns from that line of the name_map_file (starting at the\nadd_column, -a, default 3) to the end of that line of the data_file.\nIf the key is not found, columns of empty strings are added.\n\nIt outputs (to stdout) this modified version of the data_file.\n\"\"\"\n\n\nimport argparse\n\n\nDEFAULT_KEY_COLUMN = 1\n\nDEFAULT_DATA_COLUMN = 1\n\nDEFAULT_ADD_COLUMN = 3\n\nDEFAULT_DELIMITER = '\\t'\n\nDATA_FILE_HAS_HEADERS = True\n\nNAME_MAP_FILE_HAS_HEADERS = False\n\nNEW_HEADERS = ['alias', 'description']\n\n\ndef parse_args():\n    parser = argparse.ArgumentParser()\n\n    parser.add_argument('-f', '--data_file', required=True)\n    parser.add_argument('-m', '--name_map_file', required=True)\n    parser.add_argument('-k', '--key_column', default=DEFAULT_KEY_COLUMN)\n    parser.add_argument('-c', '--data_column', default=DEFAULT_DATA_COLUMN)\n    parser.add_argument('-a', '--add_column', default=DEFAULT_ADD_COLUMN)\n    parser.add_argument('-d', '--delimiter', default=DEFAULT_DELIMITER)\n    parser.add_argument('-e', '--empty_headers', action='store_true')\n\n    args = parser.parse_args()\n\n    return args\n\n\ndef read_name_map_file(name_map_file, key_column, delimiter):\n    name_data = {}\n\n    with open(name_map_file, 'r') as f:\n        if NAME_MAP_FILE_HAS_HEADERS:\n            line = next(f)\n            headers = line.rstrip().split(sep=delimiter)\n        else:\n            headers = []\n        for line in f:\n            fields = line.rstrip().split(sep=delimiter)\n            key = fields[key_column]\n            name_data[key] = fields\n            length = len(fields)\n\n    return name_data, headers, length\n\n\ndef main():\n    args = parse_args()\n\n    name_data, name_data_headers, name_data_length = \\\n      read_name_map_file(args.name_map_file, args.key_column, args.delimiter)\n    added_length = name_data_length - args.add_column\n\n    keys_not_found = {}\n\n    with open(args.data_file, 'r') as f:\n        if DATA_FILE_HAS_HEADERS:\n            line = next(f)\n            fields = line.rstrip().split(sep=args.delimiter)\n            if NAME_MAP_FILE_HAS_HEADERS:\n                fields.extend(name_data_headers[args.add_column:])\n            else:\n                if args.empty_headers:\n                    new_headers = [''] * added_length\n                else:\n                    if added_length > len(NEW_HEADERS):\n                        new_headers = NEW_HEADERS +  [''] * (added_length - len(NEW_HEADERS))\n                    elif added_length == len(NEW_HEADERS):\n                        new_headers = NEW_HEADERS\n                    else:\n                        new_headers = NEW_HEADERS[:added_length]\n                fields.extend(new_headers)\n            print(args.delimiter.join(fields))\n        for line in f:\n            fields = line.rstrip().split(sep=args.delimiter)\n            key = fields[args.data_column]\n            if key in name_data:\n                fields.extend(name_data[key][args.add_column:])\n            else:\n                if key in keys_not_found:\n                    keys_not_found[key] += 1\n                else:\n                    keys_not_found[key] = 1\n                fields.extend([''] * added_length)\n            print(args.delimiter.join(fields))\n\n\nif __name__ == \"__main__\":\n    main()"
              },
              {
                "filename": "file_renamer.cmd",
                "fileContent": {
                  "engine": "#cwl-js-engine",
                  "script": "str = \"\"\n\nif ($job.inputs.interaction_network_metadata_file) {\n    str += \"cp -p \" + $job.inputs.interaction_network_metadata_file.path + \" interaction_network.metadata\\n\";\n}\n\nif ($job.inputs.name_map_file) {\n    str += \"cp -p \" + $job.inputs.name_map_file.path + \" gene_set_name_map.txt\\n\";\n}\n\nstr;\n",
                  "class": "Expression"
                }
              }
            ],
            "class": "CreateFileRequirement"
          },
          {
            "id": "#cwl-js-engine",
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "sbg:publisher": "sbg",
        "description": "This program adds columns to a file by matching keys in a designated column of that file to keys/lines in another file.",
        "sbg:cmdPreview": "sh file_renamer.cmd && python3 join_names.py -f /path/to/data_file.ext -m /path/to/name_map_file.ext > output_file_name-string-value",
        "sbg:sbgMaintained": false
      },
      "inputs": [
        {
          "id": "#Join_Names.output_file_name",
          "default": "gsc_results.txt"
        },
        {
          "id": "#Join_Names.name_map_file",
          "source": [
            "#Knowledge_Network_Fetcher_1.pnode_map_file"
          ]
        },
        {
          "id": "#Join_Names.interaction_network_metadata_file",
          "source": [
            "#Knowledge_Network_Fetcher.network_metadata_file"
          ]
        },
        {
          "id": "#Join_Names.data_file",
          "source": [
            "#Gene_Set_Characterization.enrichment_scores"
          ]
        }
      ],
      "outputs": [
        {
          "id": "#Join_Names.new_data_file"
        },
        {
          "id": "#Join_Names.name_map_file_out"
        },
        {
          "id": "#Join_Names.interaction_network_metadata_file_out"
        }
      ],
      "sbg:x": 867.67,
      "sbg:y": 277.64705882352945
    },
    {
      "id": "#Knowledge_Network_Fetcher",
      "run": {
        "sbg:validationErrors": [],
        "sbg:id": "mepstein/genesetcharacterization/kn-fetcher-cb/9",
        "successCodes": [],
        "label": "Knowledge Network Fetcher",
        "sbg:project": "mepstein/genesetcharacterization",
        "baseCommand": [
          "sh",
          "run_fetch.cmd"
        ],
        "sbg:image_url": null,
        "x": 454.8288502412684,
        "outputs": [
          {
            "id": "#pnode_map_file",
            "label": "PNode Map File",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": "*.pnode_map"
            },
            "description": "The pnode map file",
            "doc": "5 column node map with [original_node_id, mapped_node_id, node_type, node_alias, node_description]"
          },
          {
            "id": "#node_map_file",
            "label": "Node Map File",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": "*.node_map"
            },
            "description": "The node map file",
            "doc": "5 column node map with [original_node_id, mapped_node_id, node_type, node_alias, node_description]"
          },
          {
            "id": "#network_metadata_file",
            "label": "Network Metadata File",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": "*.metadata"
            },
            "description": "The network metadata file",
            "doc": "yaml format describing network contents"
          },
          {
            "id": "#network_edge_file",
            "label": "Network Edge File",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": "*.edge"
            },
            "description": "The network edge file",
            "doc": "4 column format for subnetwork for single edge type and species"
          },
          {
            "id": "#cmd_log_file",
            "label": "Command Log File",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": "run_fetch.cmd"
            },
            "description": "The log of the fetch command",
            "doc": "log of fetch command"
          }
        ],
        "arguments": [],
        "cwlVersion": "sbg:draft-2",
        "id": "mepstein/genesetcharacterization/kn-fetcher-cb/9",
        "temporaryFailCodes": [],
        "y": 527.0870074103861,
        "sbg:job": {
          "allocatedResources": {
            "mem": 1000,
            "cpu": 1
          },
          "inputs": {}
        },
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "quay.io/cblatti3/kn_fetcher:latest"
          },
          {
            "ramMin": 2000,
            "outdirMin": 512000,
            "class": "ResourceRequirement",
            "coresMin": 1
          },
          {
            "value": 1,
            "class": "sbg:CPURequirement"
          },
          {
            "value": 1000,
            "class": "sbg:MemRequirement"
          }
        ],
        "inputs": [
          {
            "id": "#taxonid",
            "sbg:toolDefaultValue": "9606",
            "label": "Network Species Taxon ID",
            "type": [
              "null",
              "string"
            ],
            "doc": "the taxonomic id for the species of interest",
            "default": "9606",
            "description": "The network species taxon ID (e.g., 9606 for human)",
            "sbg:includeInPorts": true,
            "required": false
          },
          {
            "id": "#network_type",
            "sbg:toolDefaultValue": "Gene",
            "label": "Network Type",
            "type": [
              "null",
              "string"
            ],
            "doc": "the type of subnetwork",
            "default": "Gene",
            "description": "The network type (e.g., Gene, Property)"
          },
          {
            "id": "#get_network",
            "sbg:toolDefaultValue": "true",
            "label": "Get Network Flag",
            "type": [
              "null",
              "boolean"
            ],
            "doc": "whether or not to get the network",
            "default": true,
            "description": "Whether to get the network (or create a dummy/empty network file)",
            "sbg:includeInPorts": true,
            "required": false
          },
          {
            "id": "#edge_type",
            "sbg:toolDefaultValue": "STRING_experimental",
            "label": "Network Edge Type",
            "type": [
              "null",
              "string"
            ],
            "doc": "the edge type keyword for the subnetwork of interest",
            "default": "PPI_physical_association",
            "description": "The network edge type (e.g., STRING_experimental, gene_ontology)",
            "sbg:includeInPorts": true,
            "required": false
          },
          {
            "id": "#bucket",
            "sbg:toolDefaultValue": "KnowNets/KN-20rep-1706/userKN-20rep-1706",
            "label": "AWS S3 Bucket Name",
            "type": [
              "null",
              "string"
            ],
            "doc": "the aws s3 bucket",
            "default": "KnowNets/KN-20rep-1706/userKN-20rep-1706",
            "description": "The AWS S3 bucket to fetch the network from"
          }
        ],
        "sbg:revision": 9,
        "sbg:projectName": "GeneSetCharacterization",
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "class": "CommandLineTool",
        "stdout": "",
        "sbg:modifiedBy": "mepstein",
        "sbg:createdOn": 1503605037,
        "sbg:modifiedOn": 1508944394,
        "sbg:createdBy": "mepstein",
        "sbg:contributors": [
          "mepstein"
        ],
        "sbg:latestRevision": 9,
        "stdin": "",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 0,
            "sbg:revisionNotes": "Copy of mepstein/genesetcharacterization/kn-fetcher/4",
            "sbg:modifiedOn": 1503605037
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 1,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1503605463
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 2,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1503607843
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 3,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1504905229
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 4,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1505406350
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 5,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1505764060
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 6,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1506534405
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 7,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1506553436
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 8,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1506622490
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 9,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1508944394
          }
        ],
        "requirements": [
          {
            "class": "InlineJavascriptRequirement"
          },
          {
            "class": "ShellCommandRequirement"
          },
          {
            "fileDef": [
              {
                "filename": "run_fetch.cmd",
                "fileContent": {
                  "engine": "#cwl-js-engine",
                  "script": "//MYCMD=\"date && if [ \" + $job.inputs.get_network + ' = \"true\" ]; then /home/kn_fetcher.sh '+$job.inputs.bucket+' '+$job.inputs.network_type+' '+$job.inputs.taxonid+' '+$job.inputs.edge_type+'; else touch empty.edge; fi && date'\n\nstr = \"\";\n\nstr += \"date\";\nif ($job.inputs.get_network) {\n//if ($job.inputs.get_network == \"true\") {\n    str += \" && /home/kn_fetcher.sh \" + $job.inputs.bucket + \" \" + $job.inputs.network_type + \n\" \" + $job.inputs.taxonid + \" \" + $job.inputs.edge_type;\n}\nelse {\n    //str += \" && touch empty.edge\";\n}\nstr += \" && date\";\n\nstr;\n",
                  "class": "Expression"
                }
              }
            ],
            "class": "CreateFileRequirement"
          },
          {
            "id": "#cwl-js-engine",
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "sbg:publisher": "sbg",
        "description": "Fetch a knowledge network from an AWS S3 bucket, given a network type, an edge type, and a species taxon ID.",
        "sbg:cmdPreview": "sh run_fetch.cmd",
        "doc": "Retrieve appropriate subnetwork from KnowEnG Knowledge Network from AWS S3 storage",
        "sbg:sbgMaintained": false
      },
      "inputs": [
        {
          "id": "#Knowledge_Network_Fetcher.taxonid",
          "source": [
            "#taxonid"
          ]
        },
        {
          "id": "#Knowledge_Network_Fetcher.network_type",
          "default": "Gene"
        },
        {
          "id": "#Knowledge_Network_Fetcher.get_network",
          "source": [
            "#Gene_Set_Characterization_Parameters.get_network"
          ]
        },
        {
          "id": "#Knowledge_Network_Fetcher.edge_type",
          "source": [
            "#Gene_Set_Characterization_Parameters.edge_type"
          ]
        },
        {
          "id": "#Knowledge_Network_Fetcher.bucket",
          "default": "KnowNets/KN-20rep-1706/userKN-20rep-1706"
        }
      ],
      "outputs": [
        {
          "id": "#Knowledge_Network_Fetcher.pnode_map_file"
        },
        {
          "id": "#Knowledge_Network_Fetcher.node_map_file"
        },
        {
          "id": "#Knowledge_Network_Fetcher.network_metadata_file"
        },
        {
          "id": "#Knowledge_Network_Fetcher.network_edge_file"
        },
        {
          "id": "#Knowledge_Network_Fetcher.cmd_log_file"
        }
      ],
      "sbg:x": 454.8288502412684,
      "sbg:y": 527.0870074103861
    },
    {
      "id": "#Knowledge_Network_Fetcher_1",
      "run": {
        "sbg:validationErrors": [],
        "sbg:id": "mepstein/genesetcharacterization/kn-fetcher-cb/9",
        "successCodes": [],
        "label": "Knowledge Network Fetcher",
        "sbg:project": "mepstein/genesetcharacterization",
        "baseCommand": [
          "sh",
          "run_fetch.cmd"
        ],
        "sbg:image_url": null,
        "x": 279.5346966911765,
        "outputs": [
          {
            "id": "#pnode_map_file",
            "label": "PNode Map File",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": "*.pnode_map"
            },
            "description": "The pnode map file",
            "doc": "5 column node map with [original_node_id, mapped_node_id, node_type, node_alias, node_description]"
          },
          {
            "id": "#node_map_file",
            "label": "Node Map File",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": "*.node_map"
            },
            "description": "The node map file",
            "doc": "5 column node map with [original_node_id, mapped_node_id, node_type, node_alias, node_description]"
          },
          {
            "id": "#network_metadata_file",
            "label": "Network Metadata File",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": "*.metadata"
            },
            "description": "The network metadata file",
            "doc": "yaml format describing network contents"
          },
          {
            "id": "#network_edge_file",
            "label": "Network Edge File",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": "*.edge"
            },
            "description": "The network edge file",
            "doc": "4 column format for subnetwork for single edge type and species"
          },
          {
            "id": "#cmd_log_file",
            "label": "Command Log File",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": "run_fetch.cmd"
            },
            "description": "The log of the fetch command",
            "doc": "log of fetch command"
          }
        ],
        "arguments": [],
        "cwlVersion": "sbg:draft-2",
        "id": "mepstein/genesetcharacterization/kn-fetcher-cb/9",
        "temporaryFailCodes": [],
        "y": 116.27455767463238,
        "sbg:job": {
          "allocatedResources": {
            "mem": 1000,
            "cpu": 1
          },
          "inputs": {}
        },
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "quay.io/cblatti3/kn_fetcher:latest"
          },
          {
            "ramMin": 2000,
            "outdirMin": 512000,
            "class": "ResourceRequirement",
            "coresMin": 1
          },
          {
            "value": 1,
            "class": "sbg:CPURequirement"
          },
          {
            "value": 1000,
            "class": "sbg:MemRequirement"
          }
        ],
        "inputs": [
          {
            "id": "#taxonid",
            "sbg:toolDefaultValue": "9606",
            "label": "Network Species Taxon ID",
            "type": [
              "null",
              "string"
            ],
            "doc": "the taxonomic id for the species of interest",
            "default": "9606",
            "description": "The network species taxon ID (e.g., 9606 for human)",
            "sbg:includeInPorts": true,
            "required": false
          },
          {
            "id": "#network_type",
            "sbg:toolDefaultValue": "Gene",
            "label": "Network Type",
            "type": [
              "null",
              "string"
            ],
            "doc": "the type of subnetwork",
            "default": "Gene",
            "description": "The network type (e.g., Gene, Property)"
          },
          {
            "id": "#get_network",
            "sbg:toolDefaultValue": "true",
            "label": "Get Network Flag",
            "type": [
              "null",
              "boolean"
            ],
            "doc": "whether or not to get the network",
            "default": true,
            "description": "Whether to get the network (or create a dummy/empty network file)"
          },
          {
            "id": "#edge_type",
            "sbg:toolDefaultValue": "STRING_experimental",
            "label": "Network Edge Type",
            "type": [
              "null",
              "string"
            ],
            "doc": "the edge type keyword for the subnetwork of interest",
            "default": "PPI_physical_association",
            "description": "The network edge type (e.g., STRING_experimental, gene_ontology)",
            "sbg:includeInPorts": true,
            "required": false
          },
          {
            "id": "#bucket",
            "sbg:toolDefaultValue": "KnowNets/KN-20rep-1706/userKN-20rep-1706",
            "label": "AWS S3 Bucket Name",
            "type": [
              "null",
              "string"
            ],
            "doc": "the aws s3 bucket",
            "default": "KnowNets/KN-20rep-1706/userKN-20rep-1706",
            "description": "The AWS S3 bucket to fetch the network from"
          }
        ],
        "sbg:revision": 9,
        "sbg:projectName": "GeneSetCharacterization",
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "class": "CommandLineTool",
        "stdout": "",
        "sbg:modifiedBy": "mepstein",
        "sbg:createdOn": 1503605037,
        "sbg:modifiedOn": 1508944394,
        "sbg:createdBy": "mepstein",
        "sbg:contributors": [
          "mepstein"
        ],
        "sbg:latestRevision": 9,
        "stdin": "",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 0,
            "sbg:revisionNotes": "Copy of mepstein/genesetcharacterization/kn-fetcher/4",
            "sbg:modifiedOn": 1503605037
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 1,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1503605463
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 2,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1503607843
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 3,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1504905229
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 4,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1505406350
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 5,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1505764060
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 6,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1506534405
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 7,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1506553436
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 8,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1506622490
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 9,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1508944394
          }
        ],
        "requirements": [
          {
            "class": "InlineJavascriptRequirement"
          },
          {
            "class": "ShellCommandRequirement"
          },
          {
            "fileDef": [
              {
                "filename": "run_fetch.cmd",
                "fileContent": {
                  "engine": "#cwl-js-engine",
                  "script": "//MYCMD=\"date && if [ \" + $job.inputs.get_network + ' = \"true\" ]; then /home/kn_fetcher.sh '+$job.inputs.bucket+' '+$job.inputs.network_type+' '+$job.inputs.taxonid+' '+$job.inputs.edge_type+'; else touch empty.edge; fi && date'\n\nstr = \"\";\n\nstr += \"date\";\nif ($job.inputs.get_network) {\n//if ($job.inputs.get_network == \"true\") {\n    str += \" && /home/kn_fetcher.sh \" + $job.inputs.bucket + \" \" + $job.inputs.network_type + \n\" \" + $job.inputs.taxonid + \" \" + $job.inputs.edge_type;\n}\nelse {\n    //str += \" && touch empty.edge\";\n}\nstr += \" && date\";\n\nstr;\n",
                  "class": "Expression"
                }
              }
            ],
            "class": "CreateFileRequirement"
          },
          {
            "id": "#cwl-js-engine",
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "sbg:publisher": "sbg",
        "description": "Fetch a knowledge network from an AWS S3 bucket, given a network type, an edge type, and a species taxon ID.",
        "sbg:cmdPreview": "sh run_fetch.cmd",
        "doc": "Retrieve appropriate subnetwork from KnowEnG Knowledge Network from AWS S3 storage",
        "sbg:sbgMaintained": false
      },
      "inputs": [
        {
          "id": "#Knowledge_Network_Fetcher_1.taxonid",
          "source": [
            "#taxonid"
          ]
        },
        {
          "id": "#Knowledge_Network_Fetcher_1.network_type",
          "default": "Property"
        },
        {
          "id": "#Knowledge_Network_Fetcher_1.get_network",
          "default": true
        },
        {
          "id": "#Knowledge_Network_Fetcher_1.edge_type",
          "source": [
            "#pg_edge_type"
          ]
        },
        {
          "id": "#Knowledge_Network_Fetcher_1.bucket",
          "default": "KnowNets/KN-20rep-1706/userKN-20rep-1706"
        }
      ],
      "outputs": [
        {
          "id": "#Knowledge_Network_Fetcher_1.pnode_map_file"
        },
        {
          "id": "#Knowledge_Network_Fetcher_1.node_map_file"
        },
        {
          "id": "#Knowledge_Network_Fetcher_1.network_metadata_file"
        },
        {
          "id": "#Knowledge_Network_Fetcher_1.network_edge_file"
        },
        {
          "id": "#Knowledge_Network_Fetcher_1.cmd_log_file"
        }
      ],
      "sbg:x": 279.5346966911765,
      "sbg:y": 116.27455767463238
    },
    {
      "id": "#Gene_Set_Characterization_Parameters",
      "run": {
        "sbg:validationErrors": [],
        "sbg:id": "mepstein/genesetcharacterization/gene-set-characterization-parameters/5",
        "successCodes": [],
        "label": "Gene Set Characterization Parameters",
        "sbg:project": "mepstein/genesetcharacterization",
        "baseCommand": [
          ""
        ],
        "sbg:image_url": null,
        "x": 283.5294117647059,
        "outputs": [
          {
            "id": "#gsc_method",
            "description": "The GSC method to use (e.g., DRaWR, fisher)",
            "label": "GSC Method",
            "type": [
              "null",
              "string"
            ],
            "outputBinding": {
              "outputEval": {
                "engine": "#cwl-js-engine",
                "script": "if ($job.inputs.knowledge_network_edge_type) {\n    gsc_method = \"DRaWR\";\n}\nelse {\n    gsc_method = \"fisher\";\n}\n\ngsc_method;\n",
                "class": "Expression"
              }
            }
          },
          {
            "id": "#get_network",
            "description": "Whether to get the network",
            "label": "Get Network Flag",
            "type": [
              "null",
              "boolean"
            ],
            "outputBinding": {
              "outputEval": {
                "engine": "#cwl-js-engine",
                "script": "if ($job.inputs.knowledge_network_edge_type) {\n    get_network = true;\n}\nelse {\n    get_network = false;\n}\n\nget_network;\n",
                "class": "Expression"
              }
            }
          },
          {
            "id": "#edge_type",
            "description": "The network edge type",
            "label": "Network Edge Type",
            "type": [
              "null",
              "string"
            ],
            "outputBinding": {
              "outputEval": {
                "engine": "#cwl-js-engine",
                "script": "$job.inputs.knowledge_network_edge_type;\n",
                "class": "Expression"
              }
            }
          }
        ],
        "arguments": [],
        "cwlVersion": "sbg:draft-2",
        "id": "mepstein/genesetcharacterization/gene-set-characterization-parameters/5",
        "temporaryFailCodes": [],
        "y": 495.2941176470589,
        "sbg:job": {
          "allocatedResources": {
            "mem": 1000,
            "cpu": 1
          },
          "inputs": {
            "knowledge_network_edge_type": "knowlege_network_edge_type-string-value"
          }
        },
        "hints": [
          {
            "value": 1,
            "class": "sbg:CPURequirement"
          },
          {
            "value": 1000,
            "class": "sbg:MemRequirement"
          },
          {
            "dockerImageId": "",
            "class": "DockerRequirement",
            "dockerPull": "ubuntu"
          }
        ],
        "sbg:cmdPreview": "",
        "sbg:revision": 5,
        "sbg:projectName": "GeneSetCharacterization",
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "class": "CommandLineTool",
        "stdout": "",
        "sbg:modifiedBy": "mepstein",
        "sbg:createdOn": 1508907200,
        "sbg:modifiedOn": 1508950175,
        "sbg:createdBy": "mepstein",
        "sbg:contributors": [
          "mepstein"
        ],
        "sbg:latestRevision": 5,
        "stdin": "",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 0,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1508907200
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 1,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1508908202
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 2,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1508908332
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 3,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1508947441
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 4,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1508949007
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 5,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1508950175
          }
        ],
        "requirements": [
          {
            "id": "#cwl-js-engine",
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "sbg:publisher": "sbg",
        "description": "Sets the input parameters of some of the intermediate apps in the GSC workflow based on some of the input parameters to the workflow itself.",
        "inputs": [
          {
            "id": "#knowledge_network_edge_type",
            "label": "Knowledge Network Edge Type",
            "type": [
              "null",
              "string"
            ],
            "description": "The knowledge network edge type (not required)",
            "sbg:includeInPorts": true,
            "required": false
          }
        ],
        "sbg:sbgMaintained": false
      },
      "inputs": [
        {
          "id": "#Gene_Set_Characterization_Parameters.knowledge_network_edge_type",
          "source": [
            "#gg_edge_type"
          ]
        }
      ],
      "outputs": [
        {
          "id": "#Gene_Set_Characterization_Parameters.gsc_method"
        },
        {
          "id": "#Gene_Set_Characterization_Parameters.get_network"
        },
        {
          "id": "#Gene_Set_Characterization_Parameters.edge_type"
        }
      ],
      "sbg:x": 283.5294117647059,
      "sbg:y": 495.2941176470589
    },
    {
      "id": "#Gene_Set_Characterization",
      "run": {
        "sbg:validationErrors": [],
        "sbg:id": "mepstein/genesetcharacterization/gsc-runner-copy/16",
        "successCodes": [],
        "label": "Gene Set Characterization",
        "sbg:project": "mepstein/genesetcharacterization",
        "baseCommand": [
          "sh",
          "run_gr.cmd",
          "&&",
          "sh",
          "file_renamer.cmd"
        ],
        "sbg:image_url": null,
        "outputs": [
          {
            "id": "#enrichment_scores",
            "label": "GSC Enrichment Scores",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": "*_sorted_by_property_score_*"
            },
            "description": "GSC enrichment scores",
            "doc": "Edge format file with first three columns (user gene set, public gene set, score)"
          },
          {
            "id": "#run_params_yml",
            "label": "Configuration Parameters File",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": "run_params.yml"
            },
            "description": "The configuration parameters specified for the GSC run",
            "doc": "contains the values used in analysis"
          },
          {
            "id": "#cmd_log_file",
            "description": "The log of the GSC run command",
            "label": "Command Log File",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": "run_gr.cmd"
            }
          },
          {
            "id": "#readme",
            "description": "The README file that describes the output files",
            "label": "The README file",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": "README-GSC.txt"
            }
          },
          {
            "id": "#gene_map_file_out",
            "description": "The gene map file",
            "label": "Gene Map File",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": "gene_map.txt"
            }
          },
          {
            "id": "#genomic_file_out",
            "description": "The clean genomic spreadsheet",
            "label": "Genomic Spreadsheet File",
            "type": [
              "null",
              "File"
            ],
            "outputBinding": {
              "glob": "clean_gene_set_matrix.txt"
            }
          }
        ],
        "arguments": [],
        "cwlVersion": "sbg:draft-2",
        "id": "https://cgc-api.sbgenomics.com/v2/apps/mepstein/genesetcharacterization/gsc-runner-copy/16/raw/",
        "temporaryFailCodes": [],
        "sbg:job": {
          "allocatedResources": {
            "mem": 1000,
            "cpu": 1
          },
          "inputs": {
            "gene_map_file": {
              "secondaryFiles": [],
              "size": 0,
              "class": "File",
              "path": "/path/to/gene_map_file.ext"
            },
            "network_smoothing_percent": 9
          }
        },
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerPull": "knowengdev/geneset_characterization_pipeline:07_26_2017"
          },
          {
            "value": 1,
            "class": "sbg:CPURequirement"
          },
          {
            "value": 1000,
            "class": "sbg:MemRequirement"
          }
        ],
        "sbg:cmdPreview": "sh run_gr.cmd && sh file_renamer.cmd",
        "sbg:revision": 16,
        "sbg:projectName": "GeneSetCharacterization",
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "class": "CommandLineTool",
        "stdout": "",
        "sbg:modifiedBy": "mepstein",
        "sbg:createdOn": 1505406378,
        "sbg:modifiedOn": 1509652270,
        "sbg:createdBy": "mepstein",
        "sbg:contributors": [
          "mepstein"
        ],
        "sbg:latestRevision": 16,
        "sbg:sbgMaintained": false,
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 0,
            "sbg:revisionNotes": "Copy of mepstein/genesetcharacterization/gsc-runner/1",
            "sbg:modifiedOn": 1505406378
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 1,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1505406402
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 2,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1505414680
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 3,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1505768631
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 4,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1506019861
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 5,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1506547484
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 6,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1506572577
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 7,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1506623681
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 8,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1507220508
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 9,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1507224080
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 10,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1508281282
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 11,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1508284440
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 12,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1508351170
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 13,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1508351634
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 14,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1508948417
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 15,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1509502379
          },
          {
            "sbg:modifiedBy": "mepstein",
            "sbg:revision": 16,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1509652270
          }
        ],
        "requirements": [
          {
            "class": "ShellCommandRequirement"
          },
          {
            "class": "InlineJavascriptRequirement"
          },
          {
            "fileDef": [
              {
                "filename": "run_gr.cmd",
                "fileContent": {
                  "engine": "#cwl-js-engine",
                  "script": "str = \"\";\n\nstr += \"spreadsheet_name_full_path: \" + $job.inputs.genomic_file.path + \"\\n\";\nstr += \"pg_network_name_full_path: \" + $job.inputs.pg_network_file.path + \"\\n\";\n//str += \"gene_names_map: dummy.map\\n\";\nif ($job.inputs.gene_map_file) {\n    str += \"gene_names_map: \" + $job.inputs.gene_map_file.path + \"\\n\";\n}\nelse {\n    str += \"gene_names_map: dummy.map\\n\";\n}\nstr += \"results_directory: ./\\n\";\nstr += \"method: \" + $job.inputs.gsc_method + \"\\n\";\n//str += \"gg_network_name_full_path: \" + $job.inputs.gg_network_file.path + \"\\n\";\nif ($job.inputs.gg_network_file) {\n    str += \"gg_network_name_full_path: \" + $job.inputs.gg_network_file.path + \"\\n\";\n    str += \"rwr_convergence_tolerence: 0.0001\\n\";\n    str += \"rwr_max_iterations: 500\\n\";\n    //str += \"rwr_restart_probability: 0.5\\n\";\n    if ($job.inputs.network_smoothing_percent &&\n        $job.inputs.network_smoothing_percent >= 0 && $job.inputs.network_smoothing_percent <= 100) {\n        restart_prob = 1 - ($job.inputs.network_smoothing_percent/100);\n        str += \"rwr_restart_probability: \" + restart_prob + \"\\n\";\n    }\n    else {\n        str += \"rwr_restart_probability: 0.5\\n\";\n    }\n}\n\nstr2 = \"echo \\\"\" + str + \"\\\" > run_params.yml && tail -n+2 \" + $job.inputs.genomic_file.path + \" | awk '{print \\$1\\\"\\\\t\\\"\\$1}' > dummy.map && python3 /home/src/geneset_characterization.py -run_directory ./ -run_file run_params.yml\";\n\nstr2;\n",
                  "class": "Expression"
                }
              },
              {
                "filename": "README-GSC.txt",
                "fileContent": "This file contains a description of the different output files of the gene set characterization (GSC) pipeline. The downloaded zip file will contain one directory for each public gene set collection that was selected during the analysis configuration as well as up to three other reference files. The format of some output files will vary depending on the parameter options selected.\n\nFiles in Gene Set Collection Directory:\n  A) gsc_results.txt - Gene Set Characterization Results File\n  B) gene_set_name_map.txt - Public Gene Set Mapping File\n  C) run_params.yml - Run Parameters File\n  D) *.metadata - Gene Set Collection Metadata\n\nOther Reference Files:\n  E) clean_gene_set_matrix.txt - Mapped Genomic Spreadsheet File\n  F) gene_map.txt - Gene ID Mapping File\n  G) interaction_network.metadata - Knowledge Network Metadata (if KN guided analysis)\n\n(if KN guided analysis)a \"*.edge\" file that describes the gene set membership in the public collection and\n  B) a \"*.df\" file that contains the results of the analysis\n\nBelow are descriptions for the contents of each of these files:\n\nA) gsc_results.txt - Gene Set Characterization Results File\nThe columns of this file will depend on the choice you made whether to \"Use the Knowledge Network\"\n  If \"Yes\" Option (DRaWR):\n    1) user_gene_set: the names of the gene sets that you submitted\n    2) property_gene_set: the internal KnowEnG ids for public gene sets from one public gene set collection\n    3) difference_score: difference of query_score (col4) and baseline_score(col5) divided by the largest difference in the file. This value is between 0 and 1 and reported when it is greater than 0.5\n    4) query_score: converged stationary probability of being at the property_gene_set node in the chosen heterogenous network given that you restart at any only gene node from the user gene set. This value is between 0 and 1.\n    5) baseline_score: converged stationary probability of being at the property_gene_set node in the chosen heterogenous network given that you restart at any gene node. This value is between 0 and 1.\n  If \"No\" Option (Fisher Exact):\n    1) user_gene_set: the names of the gene sets that you submitted\n    2) property_gene_set: the internal KnowEnG ids for public gene sets from one public gene set collection\n    3) pvalue: the -1 * log10 pvalue of the one sided (alternative = 'greater') Fisher Exact Test using the contingency table corresponding to the user set and property gene set of the row. This value is reported when it is greater than 2.\n        NOTE1: You can take 10^-x to convert these values back into the original pvalues.\n        NOTE2: These pvalues (-1*log10) have not been corrected for multiple hypothesis testing.\n    4) universe_count: total number of genes annotated by the public gene set collection and listed in your spreadsheet (or known for the species of your submitted gene list).\n    5) user_count: size of your gene set in the universe\n    6) property_count: size of the public gene set in the universe\n    7) overlap_count: size of the overlap between the two in the universe\n\nB) gene_set_name_map.txt - Public Gene Set Mapping File\nThe columns of this file are defined as follows:\n  1) property_gene_set_id: the internal KnowEnG id for a the public gene set\n  2) property_gene_set_id2: the internal KnowEnG id for a the public gene set\n  3) gene_set_type: will always be \u201cProperty\u201d\n  4) property_gene_set_alias: alias for gene set from original data source\n  5) property_gene_set_desc: description for gene set from original data source\n\nC) run_params.yml - Run Parameters File\nThis yaml file contains the run parameters file that was used by the computation container that ran the KnowEnG pipeline (implementation available on GitHub) on the input data.\n\nD) *.metadata - Gene Set Collection Metadata\nThis yaml file contains information about the gene set collection used for the results in this directory.  Its keys include summarizations about the network size (\u201cdata\u201d), its public data source details (\u201cdatasets\u201d), information about the meaning of its edges (\u201cedge_type\u201d), and some commands and configurations used in its construction (\u201cexport\u201d).\n\nE) clean_gene_set_matrix.txt - Mapped Genomic Spreadsheet File\nThis file contains a modified version of the user\u2019s input genomic matrix where the original gene identifiers provided have been mapped to stable Ensembl gene_ids where possible.  Rows with original gene names that are unable to be mapped or are not unique are discarded from this clean output.  Only the remaining genes are used for the gene universe for the gene set characterization method.\n\nF) gene_map.txt - Gene ID Mapping File\nThe columns of this file are defined as follows:\n    1) KN_gene_id: the stable Ensembl gene ID that KnowEnG uses internally\n    2) user_gene_id: the corresponding gene/transcript/protein identifier supplied by the user in the original genomic spreadsheet.\n\nG) interaction_network.metadata - Knowledge Network Metadata (if KN guided analysis)\nThis yaml file contains information about the interaction network if used in the analysis.  Its keys include summarizations about the network size (\u201cdata\u201d), its public data source details (\u201cdatasets\u201d), information about the meaning of its edges (\u201cedge_type\u201d), and some commands and configurations used in its construction (\u201cexport\u201d)."
              },
              {
                "filename": "file_renamer.cmd",
                "fileContent": {
                  "engine": "#cwl-js-engine",
                  "script": "str = \"\"\n\nif ($job.inputs.gene_map_file) {\n    str += \"cp -p \" + $job.inputs.gene_map_file.path + \" gene_map.txt\\n\";\n}\n\nif ($job.inputs.genomic_file) {\n    str += \"cp -p \" + $job.inputs.genomic_file.path + \" clean_gene_set_matrix.txt\\n\";\n}\n\nstr;\n",
                  "class": "Expression"
                }
              }
            ],
            "class": "CreateFileRequirement"
          },
          {
            "id": "#cwl-js-engine",
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ]
          }
        ],
        "sbg:publisher": "sbg",
        "description": "Test a gene set for enrichment against a large compendium of annotations.",
        "inputs": [
          {
            "id": "#pg_network_file",
            "description": "The gene set property network file",
            "label": "Gene Set Property Network File",
            "type": [
              "File"
            ],
            "doc": "property-gene network of interactions in edge format"
          },
          {
            "id": "#gg_network_file",
            "description": "The knowledge network file",
            "label": "Knowledge Network File",
            "type": [
              "null",
              "File"
            ],
            "doc": "gene-gene network of interactions in edge format"
          },
          {
            "id": "#genomic_file",
            "description": "The genomic spreadsheet file",
            "label": "Genomic Spreadsheet File",
            "type": [
              "File"
            ],
            "doc": "spreadsheet of genomic data with samples as columns and genes as rows"
          },
          {
            "id": "#gsc_method",
            "label": "GSC Method",
            "type": [
              "null",
              "string"
            ],
            "doc": "which method to use for GSC, i.e. DRaWR, fisher",
            "description": "The GSC method to use (e.g., DRaWR, fisher)",
            "sbg:includeInPorts": true
          },
          {
            "id": "#gene_map_file",
            "description": "The gene map file",
            "label": "Gene Map File",
            "type": [
              "null",
              "File"
            ]
          },
          {
            "id": "#network_smoothing_percent",
            "sbg:toolDefaultValue": "50",
            "label": "Amount of Network Smoothing",
            "type": [
              "null",
              "int"
            ],
            "description": "The amount of network smoothing (as a percent; default 50%); a greater value means greater contribution from the network interactions",
            "sbg:includeInPorts": true
          }
        ],
        "doc": "Network-guided gene set characterization method implementation by KnowEnG that relates public gene sets to user gene sets",
        "stdin": ""
      },
      "inputs": [
        {
          "id": "#Gene_Set_Characterization.pg_network_file",
          "source": [
            "#Knowledge_Network_Fetcher_1.network_edge_file"
          ]
        },
        {
          "id": "#Gene_Set_Characterization.gg_network_file",
          "source": [
            "#Knowledge_Network_Fetcher.network_edge_file"
          ]
        },
        {
          "id": "#Gene_Set_Characterization.genomic_file",
          "source": [
            "#Pipeline_Preprocessing.clean_genomic_file"
          ]
        },
        {
          "id": "#Gene_Set_Characterization.gsc_method",
          "source": [
            "#Gene_Set_Characterization_Parameters.gsc_method"
          ]
        },
        {
          "id": "#Gene_Set_Characterization.gene_map_file",
          "source": [
            "#Pipeline_Preprocessing.gene_map_file"
          ]
        },
        {
          "id": "#Gene_Set_Characterization.network_smoothing_percent",
          "source": [
            "#network_smoothing_percent"
          ]
        }
      ],
      "outputs": [
        {
          "id": "#Gene_Set_Characterization.enrichment_scores"
        },
        {
          "id": "#Gene_Set_Characterization.run_params_yml"
        },
        {
          "id": "#Gene_Set_Characterization.cmd_log_file"
        },
        {
          "id": "#Gene_Set_Characterization.readme"
        },
        {
          "id": "#Gene_Set_Characterization.gene_map_file_out"
        },
        {
          "id": "#Gene_Set_Characterization.genomic_file_out"
        }
      ],
      "sbg:x": 699.27,
      "sbg:y": 401.1484662224265
    }
  ],
  "inputs": [
    {
      "id": "#genomic_spreadsheet_file",
      "label": "Genomic Spreadsheet File",
      "type": [
        "File"
      ],
      "description": "The genomic spreadsheet file, genes x samples, tab-separated.",
      "sbg:includeInPorts": true,
      "sbg:x": 66.66,
      "sbg:y": 329.2716710707721
    },
    {
      "id": "#gg_edge_type",
      "label": "Knowledge Network Edge Type",
      "type": [
        "null",
        "string"
      ],
      "description": "The knowledge network edge type (e.g., STRING_experimental).  See [https://knoweng.org/kn-data-references/#kn_contents_by_gene-gene_edge_type] for possible values (KN Contents by Gene-Gene Edge Type).",
      "sbg:includeInPorts": true,
      "sbg:x": 66.66,
      "sbg:y": 463.3893899356618
    },
    {
      "id": "#taxonid",
      "label": "Species Taxon ID",
      "type": [
        "string"
      ],
      "description": "The species taxon ID (e.g., 9606 for human).  See [https://knoweng.org/kn-data-references/#kn_contents_by_species] for possible values (KN Contents by Species).",
      "sbg:includeInPorts": true,
      "sbg:x": 66.66,
      "sbg:y": 47.478978774126844
    },
    {
      "id": "#pg_edge_type",
      "label": "Gene Set Property Network Edge Type",
      "type": [
        "string"
      ],
      "description": "The gene set property network edge type (e.g., gene_ontology).  See [https://knoweng.org/kn-data-references/#kn_contents_by_property-gene_edge_type] for possible values (KN Contents by Property-Gene Edge Type).",
      "sbg:includeInPorts": true,
      "sbg:x": 66.66000366210939,
      "sbg:y": 187.75904038373164
    },
    {
      "id": "#network_smoothing_percent",
      "label": "Amount of Network Smoothing",
      "type": [
        "null",
        "int"
      ],
      "description": "The amount of network smoothing (as a percent; default 50%); a greater value means greater contribution from the network interactions",
      "sbg:includeInPorts": true,
      "sbg:x": 66.66,
      "sbg:y": 604.7060259650736
    }
  ],
  "sbg:revision": 43,
  "class": "Workflow",
  "sbg:modifiedBy": "mepstein",
  "sbg:modifiedOn": 1509655713,
  "sbg:canvas_zoom": 0.8499999999999999,
  "sbg:contributors": [
    "mepstein"
  ],
  "sbg:latestRevision": 43,
  "requirements": [],
  "sbg:links": [
    {
      "id": "https://knoweng.org/",
      "label": "KnowEnG Main Website"
    },
    {
      "id": "https://knoweng.org/analyze/",
      "label": "KnowEnG Analytics"
    },
    {
      "id": "https://knoweng.org/kn-overview/",
      "label": "Knowledge Network Overview"
    },
    {
      "id": "https://knoweng.org/pipelines/",
      "label": "Knowledge-Guided Pipelines"
    },
    {
      "id": "https://knoweng.org/pipelines/#gene_set_characterization",
      "label": "GSC Pipeline"
    },
    {
      "id": "https://knoweng.org/quick-start/",
      "label": "Pipeline Quickstart Guides"
    },
    {
      "id": "https://knoweng.org/wp-content/uploads/2017/08/GSC_Quickstart.pdf",
      "label": "GSC Pipeline Quickstart"
    },
    {
      "id": "https://knoweng.org/wp-content/uploads/2017/11/GSC_CGC_Quickstart.pdf",
      "label": "CGC GSC Pipeline Quickstart"
    },
    {
      "id": "https://www.youtube.com/channel/UCjyIIolCaZIGtZC20XLBOyg",
      "label": "KnowEnG YouTube Channel"
    }
  ]
}